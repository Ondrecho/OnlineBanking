{
  "openapi": "3.0.1",
  "info": {
    "title": "Banking System API",
    "description": "API for banking system with user management, accounts, transactions, and administration",
    "version": "1.0.0"
  },
  "servers": [
    {
      "url": "http://localhost:8080",
      "description": "Local server"
    }
  ],
  "tags": [
    {
      "name": "Authentication",
      "description": "Endpoints for user authentication"
    },
    {
      "name": "User Profile",
      "description": "Endpoints for regular user operations"
    },
    {
      "name": "Admin - User Management",
      "description": "Administrative endpoints for managing users"
    },
    {
      "name": "Account Management",
      "description": "Endpoints for managing bank accounts"
    },
    {
      "name": "Transactions",
      "description": "Endpoints for financial transactions"
    },
    {
      "name": "Role Management",
      "description": "Endpoints for managing user roles"
    },
    {
      "name": "Logs Management",
      "description": "Endpoints for managing system logs"
    },
    {
      "name": "Statistics",
      "description": "Endpoints for visit statistics"
    }
  ],
  "paths": {
    "/api/auth/register": {
      "post": {
        "tags": ["Authentication"],
        "summary": "Register new user",
        "description": "Register a new user in the system",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/RegisterRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "User registered successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/JwtResponse"
                }
              }
            }
          },
          "400": {
            "description": "Invalid registration data"
          }
        }
      }
    },
    "/api/auth/login": {
      "post": {
        "tags": ["Authentication"],
        "summary": "User login",
        "description": "Authenticate user and return JWT token",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/LoginRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Authentication successful",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/JwtResponse"
                }
              }
            }
          },
          "401": {
            "description": "Invalid credentials"
          }
        }
      }
    },
    "/api/user/profile": {
      "get": {
        "tags": ["User Profile"],
        "summary": "Get current user profile",
        "description": "Retrieve profile information of the currently authenticated user",
        "responses": {
          "200": {
            "description": "Profile retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserResponseDto"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      },
      "patch": {
        "tags": ["User Profile"],
        "summary": "Update current user profile",
        "description": "Partially update profile information of the currently authenticated user",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateUserDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Profile updated successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserResponseDto"
                }
              }
            }
          },
          "400": {
            "description": "Invalid update data"
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      }
    },
    "/api/user/accounts": {
      "get": {
        "tags": ["User Profile"],
        "summary": "Get current user accounts",
        "description": "Retrieve all accounts belonging to the currently authenticated user",
        "responses": {
          "200": {
            "description": "Accounts retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/AccountDto"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      },
      "post": {
        "tags": ["User Profile"],
        "summary": "Create new account",
        "description": "Create a new bank account for the currently authenticated user",
        "parameters": [
          {
            "name": "currency",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string",
              "enum": ["USD", "EUR", "RUB", "BYN"]
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Account created successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AccountDto"
                }
              }
            }
          },
          "400": {
            "description": "Invalid currency"
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      }
    },
    "/api/admin/users": {
      "get": {
        "tags": ["Admin - User Management"],
        "summary": "Get all users",
        "description": "Retrieve list of all users with optional filtering",
        "parameters": [
          {
            "name": "fullName",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "roleName",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Users retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/UserResponseDto"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden - admin access required"
          }
        }
      },
      "post": {
        "tags": ["Admin - User Management"],
        "summary": "Create new user",
        "description": "Create a new user with the provided details (admin only)",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateUserDto"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "User created successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserResponseDto"
                }
              }
            }
          },
          "400": {
            "description": "Invalid user data"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden - admin access required"
          }
        }
      }
    },
    "/api/admin/users/bulk": {
      "post": {
        "tags": ["Admin - User Management"],
        "summary": "Bulk create users",
        "description": "Create multiple users at once (admin only)",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/CreateUserDto"
                }
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Users created successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/UserResponseDto"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Invalid user data"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden - admin access required"
          }
        }
      }
    },
    "/api/admin/users/{userId}": {
      "get": {
        "tags": ["Admin - User Management"],
        "summary": "Get user by ID",
        "description": "Retrieve user details by user ID (admin only)",
        "parameters": [
          {
            "name": "userId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "User retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserResponseDto"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden - admin access required"
          },
          "404": {
            "description": "User not found"
          }
        }
      },
      "put": {
        "tags": ["Admin - User Management"],
        "summary": "Fully update user",
        "description": "Update all fields of a user (admin only)",
        "parameters": [
          {
            "name": "userId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateUserDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "User updated successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserResponseDto"
                }
              }
            }
          },
          "400": {
            "description": "Invalid update data"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden - admin access required"
          },
          "404": {
            "description": "User not found"
          }
        }
      },
      "patch": {
        "tags": ["Admin - User Management"],
        "summary": "Partially update user",
        "description": "Update specific fields of a user (admin only)",
        "parameters": [
          {
            "name": "userId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateUserDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "User updated successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserResponseDto"
                }
              }
            }
          },
          "400": {
            "description": "Invalid update data"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden - admin access required"
          },
          "404": {
            "description": "User not found"
          }
        }
      },
      "delete": {
        "tags": ["Admin - User Management"],
        "summary": "Delete user",
        "description": "Delete a user by ID (admin only)",
        "parameters": [
          {
            "name": "userId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "User deleted successfully"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden - admin access required"
          },
          "404": {
            "description": "User not found"
          }
        }
      }
    },
    "/api/admin/users/{userId}/accounts": {
      "get": {
        "tags": ["Admin - User Management"],
        "summary": "Get user accounts",
        "description": "Retrieve all accounts belonging to a specific user (admin only)",
        "parameters": [
          {
            "name": "userId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Accounts retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/AccountDto"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden - admin access required"
          },
          "404": {
            "description": "User not found"
          }
        }
      },
      "post": {
        "tags": ["Admin - User Management"],
        "summary": "Create account for user",
        "description": "Create a new bank account for a specific user (admin only)",
        "parameters": [
          {
            "name": "userId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "currency",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string",
              "enum": ["USD", "EUR", "RUB", "BYN"]
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Account created successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AccountDto"
                }
              }
            }
          },
          "400": {
            "description": "Invalid currency"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden - admin access required"
          },
          "404": {
            "description": "User not found"
          }
        }
      }
    },
    "/api/accounts/{iban}/user": {
      "get": {
        "tags": ["Account Management"],
        "summary": "Get user by IBAN",
        "description": "Retrieve user details by account IBAN (admin only)",
        "parameters": [
          {
            "name": "iban",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "User retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserResponseDto"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden - admin access required"
          },
          "404": {
            "description": "Account not found"
          }
        }
      }
    },
    "/api/accounts/{iban}/close": {
      "patch": {
        "tags": ["Account Management"],
        "summary": "Close account",
        "description": "Close an existing account (mark as inactive)",
        "parameters": [
          {
            "name": "iban",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Account closed successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OperationResponseDto"
                }
              }
            }
          },
          "400": {
            "description": "Invalid IBAN or account already closed"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden - account owner or admin access required"
          },
          "404": {
            "description": "Account not found"
          }
        }
      }
    },
    "/api/accounts/{iban}/open": {
      "patch": {
        "tags": ["Account Management"],
        "summary": "Reopen account",
        "description": "Reopen a previously closed account",
        "parameters": [
          {
            "name": "iban",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Account reopened successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OperationResponseDto"
                }
              }
            }
          },
          "400": {
            "description": "Invalid IBAN or account already active"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden - account owner or admin access required"
          },
          "404": {
            "description": "Account not found"
          }
        }
      }
    },
    "/api/accounts/{iban}": {
      "delete": {
        "tags": ["Account Management"],
        "summary": "Delete account",
        "description": "Permanently delete an account from the system (admin only)",
        "parameters": [
          {
            "name": "iban",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Account deleted successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OperationResponseDto"
                }
              }
            }
          },
          "400": {
            "description": "Invalid IBAN"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden - admin access required"
          },
          "404": {
            "description": "Account not found"
          }
        }
      }
    },
    "/api/transactions": {
      "post": {
        "tags": ["Transactions"],
        "summary": "Process transaction",
        "description": "Handle financial transaction between accounts",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/SingleAccountTransactionDto"
                  },
                  {
                    "$ref": "#/components/schemas/TransferTransactionDto"
                  }
                ],
                "discriminator": {
                  "propertyName": "transactionType",
                  "mapping": {
                    "DEPOSIT": "#/components/schemas/SingleAccountTransactionDto",
                    "WITHDRAWAL": "#/components/schemas/SingleAccountTransactionDto",
                    "TRANSFER": "#/components/schemas/TransferTransactionDto"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Transaction processed successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OperationResponseDto"
                }
              }
            }
          },
          "400": {
            "description": "Invalid transaction request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden - insufficient permissions"
          }
        }
      }
    },
    "/api/roles": {
      "get": {
        "tags": ["Role Management"],
        "summary": "Get all roles",
        "description": "Retrieve a list of all available roles (admin only)",
        "responses": {
          "200": {
            "description": "Roles retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/RoleDto"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden - admin access required"
          }
        }
      },
      "post": {
        "tags": ["Role Management"],
        "summary": "Create role",
        "description": "Create a new role (admin only)",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/RoleDto"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Role created successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RoleDto"
                }
              }
            }
          },
          "400": {
            "description": "Invalid role data"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden - admin access required"
          }
        }
      }
    },
    "/api/roles/{roleId}": {
      "put": {
        "tags": ["Role Management"],
        "summary": "Update role",
        "description": "Update an existing role (admin only)",
        "parameters": [
          {
            "name": "roleId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/RoleDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Role updated successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RoleDto"
                }
              }
            }
          },
          "400": {
            "description": "Invalid role data"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden - admin access required"
          },
          "404": {
            "description": "Role not found"
          }
        }
      },
      "delete": {
        "tags": ["Role Management"],
        "summary": "Delete role",
        "description": "Delete a role (admin only)",
        "parameters": [
          {
            "name": "roleId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Role deleted successfully"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden - admin access required"
          },
          "404": {
            "description": "Role not found"
          }
        }
      }
    },
    "/api/logs": {
      "post": {
        "tags": ["Logs Management"],
        "summary": "Create log file task",
        "description": "Create an asynchronous task to generate log file for a specific date",
        "parameters": [
          {
            "name": "date",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string",
              "pattern": "^\\d{4}-\\d{2}-\\d{2}$"
            }
          }
        ],
        "responses": {
          "202": {
            "description": "Task created successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "taskId": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Invalid date format or date in future"
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      }
    },
    "/api/logs/{taskId}/status": {
      "get": {
        "tags": ["Logs Management"],
        "summary": "Get task status",
        "description": "Check the status of a log file generation task",
        "parameters": [
          {
            "name": "taskId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Task status retrieved",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string"
                    },
                    "progress": {
                      "type": "integer"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "Task not found"
          }
        }
      }
    },
    "/api/logs/{taskId}/file": {
      "get": {
        "tags": ["Logs Management"],
        "summary": "Get log file",
        "description": "Download the generated log file",
        "parameters": [
          {
            "name": "taskId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Log file retrieved",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string"
                }
              }
            },
            "headers": {
              "Content-Disposition": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "Log file not found"
          }
        }
      }
    },
    "/api/stats/record": {
      "post": {
        "tags": ["Statistics"],
        "summary": "Record visit",
        "description": "Record a visit to a specific URL",
        "parameters": [
          {
            "name": "url",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Visit recorded"
          }
        }
      }
    },
    "/api/stats/count": {
      "get": {
        "tags": ["Statistics"],
        "summary": "Get visit count",
        "description": "Get visit count for a specific URL",
        "parameters": [
          {
            "name": "url",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Visit count retrieved",
            "content": {
              "application/json": {
                "schema": {
                  "type": "integer"
                }
              }
            }
          }
        }
      }
    },
    "/api/stats/all": {
      "get": {
        "tags": ["Statistics"],
        "summary": "Get all statistics",
        "description": "Get visit statistics for all URLs",
        "responses": {
          "200": {
            "description": "Statistics retrieved",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": {
                    "type": "integer"
                  }
                }
              }
            }
          }
        }
      }
    }
  },
  "components": {
    "schemas": {
      "RegisterRequest": {
        "type": "object",
        "properties": {
          "fullName": {
            "type": "string",
            "minLength": 2,
            "maxLength": 100,
            "pattern": "^[a-zA-Z\\s]+$",
            "example": "John Doe"
          },
          "dateOfBirth": {
            "type": "string",
            "format": "date",
            "example": "1990-01-01"
          },
          "email": {
            "type": "string",
            "format": "email",
            "pattern": "^[A-Za-z0-9+_.-]+@[A-Za-z0-9.-]+\\.[A-Za-z]{2,}$",
            "example": "john.doe@example.com"
          },
          "password": {
            "type": "string",
            "minLength": 8,
            "pattern": "^(?=.*[a-zA-Z])(?=.*\\d).+$",
            "writeOnly": true,
            "example": "Password123!"
          }
        },
        "required": ["fullName", "dateOfBirth", "email", "password"]
      },
      "LoginRequest": {
        "type": "object",
        "properties": {
          "email": {
            "type": "string",
            "format": "email",
            "example": "john.doe@example.com"
          },
          "password": {
            "type": "string",
            "writeOnly": true,
            "example": "Password123!"
          }
        },
        "required": ["email", "password"]
      },
      "JwtResponse": {
        "type": "object",
        "properties": {
          "token": {
            "type": "string",
            "example": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9..."
          },
          "isAdmin": {
            "type": "boolean",
            "example": false
          }
        }
      },
      "CreateUserDto": {
        "type": "object",
        "properties": {
          "fullName": {
            "type": "string",
            "minLength": 2,
            "maxLength": 100,
            "pattern": "^[a-zA-Z\\s]+$",
            "example": "John Doe"
          },
          "dateOfBirth": {
            "type": "string",
            "format": "date",
            "example": "1990-01-01"
          },
          "email": {
            "type": "string",
            "format": "email",
            "pattern": "^[A-Za-z0-9+_.-]+@[A-Za-z0-9.-]+\\.[A-Za-z]{2,}$",
            "example": "john.doe@example.com"
          },
          "password": {
            "type": "string",
            "minLength": 8,
            "pattern": "^(?=.*[a-zA-Z])(?=.*\\d).+$",
            "writeOnly": true,
            "example": "Password123!"
          },
          "roles": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/RoleDto"
            },
            "minItems": 1
          }
        },
        "required": ["fullName", "dateOfBirth", "email", "password", "roles"]
      },
      "UpdateUserDto": {
        "type": "object",
        "properties": {
          "fullName": {
            "type": "string",
            "minLength": 2,
            "maxLength": 100,
            "pattern": "^[a-zA-Z\\s]+$",
            "example": "John Doe"
          },
          "email": {
            "type": "string",
            "format": "email",
            "example": "john.doe@example.com"
          },
          "dateOfBirth": {
            "type": "string",
            "format": "date",
            "example": "1990-01-01"
          },
          "roles": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/RoleDto"
            },
            "minItems": 1
          },
          "password": {
            "type": "string",
            "minLength": 8,
            "pattern": "^(?=.*[a-zA-Z])(?=.*\\d).+$",
            "writeOnly": true,
            "example": "NewPassword123!"
          }
        },
        "required": ["fullName", "email", "dateOfBirth", "roles"]
      },
      "UserResponseDto": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int64",
            "example": 1
          },
          "fullName": {
            "type": "string",
            "example": "John Doe"
          },
          "email": {
            "type": "string",
            "format": "email",
            "example": "john.doe@example.com"
          },
          "dateOfBirth": {
            "type": "string",
            "format": "date",
            "example": "1990-01-01"
          },
          "roles": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/RoleDto"
            }
          },
          "accounts": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/AccountDto"
            }
          }
        }
      },
      "RoleDto": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int64",
            "example": 1
          },
          "name": {
            "type": "string",
            "minLength": 2,
            "maxLength": 50,
            "pattern": "^ROLE_[A-Z_]+$",
            "example": "ROLE_USER"
          }
        },
        "required": ["name"]
      },
      "AccountDto": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int64",
            "example": 1
          },
          "iban": {
            "type": "string",
            "minLength": 16,
            "maxLength": 34,
            "example": "BY33BANK1234567890123456"
          },
          "balance": {
            "type": "number",
            "format": "double",
            "minimum": 0.0,
            "example": 1500.0
          },
          "currency": {
            "type": "string",
            "enum": ["USD", "EUR", "RUB", "BYN"],
            "example": "USD"
          },
          "status": {
            "type": "string",
            "enum": ["ACTIVE", "CLOSED"],
            "example": "ACTIVE"
          }
        },
        "required": ["iban", "balance", "currency", "status"]
      },
      "OperationResponseDto": {
        "type": "object",
        "properties": {
          "message": {
            "type": "string",
            "example": "Operation completed successfully"
          },
          "timeStamp": {
            "type": "string",
            "format": "date-time",
            "example": "2025-03-19T12:00:00Z"
          },
          "status": {
            "type": "string",
            "example": "OK"
          }
        }
      },
      "BaseTransactionDto": {
        "type": "object",
        "properties": {
          "transactionType": {
            "type": "string",
            "enum": ["DEPOSIT", "WITHDRAWAL", "TRANSFER"]
          },
          "amount": {
            "type": "number",
            "format": "double",
            "minimum": 0.01,
            "example": 500.0
          },
          "currency": {
            "type": "string",
            "enum": ["USD", "EUR", "RUB", "BYN"],
            "example": "USD"
          }
        },
        "required": ["transactionType", "amount", "currency"],
        "discriminator": {
          "propertyName": "transactionType"
        }
      },
      "SingleAccountTransactionDto": {
        "allOf": [
          {
            "$ref": "#/components/schemas/BaseTransactionDto"
          },
          {
            "type": "object",
            "properties": {
              "iban": {
                "type": "string",
                "minLength": 16,
                "maxLength": 34,
                "example": "BY33BANK1234567890123456"
              }
            },
            "required": ["iban"]
          }
        ]
      },
      "TransferTransactionDto": {
        "allOf": [
          {
            "$ref": "#/components/schemas/BaseTransactionDto"
          },
          {
            "type": "object",
            "properties": {
              "fromIban": {
                "type": "string",
                "minLength": 16,
                "maxLength": 34,
                "example": "BY33BANK1234567890123456"
              },
              "toIban": {
                "type": "string",
                "minLength": 16,
                "maxLength": 34,
                "example": "DE12BANK0400440532025000"
              }
            },
            "required": ["fromIban", "toIban"]
          }
        ]
      }
    },
    "securitySchemes": {
      "bearerAuth": {
        "type": "http",
        "scheme": "bearer",
        "bearerFormat": "JWT"
      }
    }
  },
  "security": [
    {
      "bearerAuth": []
    }
  ]
}